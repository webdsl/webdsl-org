Lunch at January 3?

----------------------------------------------

# WebDSL 

Features

* Data modeling
  - primitive and entity associations
  - collection associations
  - bidirectional relations
  - Symbolic identities (keys)

* Page definitions
  - page flow
  - data access for reading and writing
  - iteration
  - conditional content
  - sensible URLs (e.g. /webdslorg/page/FooBar) 
    based on symbolic identities

* Authentication and access control
  - rules declared separately

* Domain-specific operations and types
  - Date: 
  - Secret: password digest, checking
  - Image: upload, download, display
  - WikiText: markup
  - Patch: diffs and patching
  - File: upload, download
  - Sending email

* Interaction styling
  - separate from main definition

------------------------------------------------

# WebDSL.org

#### Applications

* News
* Wiki
* Blog
* Forum
* Issue tracker
* Presenation

#### Features 

* Dynamic, context-sensitive menus
  - wiki startpages
  - forums menu

* Application configuration editable online

#### Metrics

* 2801 LOC (2007/12/19 23:30 -- revision 835)

* First commit: 2007/10/30
  - some initial code inherited from SERG prototype application

---------------------------

# Implementation Impressions

Some excerpts from the implementation of webdsl.org in WebDSL.

Example: Wiki (see e.g. [[page(WebDSL)]])

---------------------------

#### Wiki Page Data Model

    entity Page {
      name     :: String    (id,name)
      title    :: String
      content  :: WikiText
      authors  -> Set<User> 
    }

--------------------------

#### Wiki Page Presentation

    define page page(p : Page)
    {
      main()
      title{output(p.title)}
      define wikiOperationsMenuItems() {
        pageOperationsMenuItems(p)
      }
      define body() {
        section {
          header{ output(p.title) }
          par{ output(p.content) }
    	  block("wikiPageByLine") {
    	    par{"Contributions by " 
    	      for(author : User in p.authorsList) {
    	        output(author) }}
              par{ previousLink(p) }
          }
        }
      }
    }

--------------------------

#### Wiki Page Edit

    define page editPage(p : Page)
    {
      var newTitle   : String   := p.title;
      var newContent : WikiText := p.content;
      main() 
      title{"Edit Page: " output(p.name)}
      define body() {
        section {
          header{"Edit Page: " output(p.name)}
          form { 
            par{ input(newTitle) }
            par{ input(newContent) }
            par{ action("Save changes", savePage()) }
            action savePage() {
              p.makeChange(newTitle, newContent, securityContext.principal);
              // makeChange stores patch to keep history
              p.persist();
              return page(p);
            }
          }
        }
      }
    }

-----------------------------------

#### Sign in

    define signin() 
    {
      var username : String;
      var password : Secret;
      form { 
        table {
          row{ "Username: " input(username) }
          row{ "Password: " input(password) }
          row{ action("Sign in", signin()) "" }
        }
        action signin() {
          var users : List<User> :=
              select u from User as u 
              where (u._username = ~username);
    
          for (us : User in users ) {
            if (us.password.check(password)) {
              securityContext.principal := us;
              securityContext.loggedIn := true;
              return user(securityContext.principal);
            }
          }
          securityContext.loggedIn := false;
          return home();
        }
      }
      par{ navigate(register()){"Register new user"} }
    }

------------------------------------------------------------------------

# Interaction Styling 

by Jippe Holwerda

* Styling the UI
  * separation of UI logic/structure and presentation
  * CSS implements this to some extent, but is very low-level
  * towards higher level stylesheets

* Issues
  * rich user interaction (AJAX) components
  * email
  * file upload
  * captchas
  * dropdown menus
  * bidirectional associations
  * association editing (select)

#### Templates

    define main() 
    {
      block("top") { top() }
      block("body") {
        block("left_innerbody") {
          sidebar()
        }
        block("main_innerbody") {
          body()
        }
      }
      block("footer") {
        footer()
      }
    }

    define top() {
      block("header") {}
      block("menubar") { 
        applicationMenubar()
      }
    }

#### Menus

    define wikiMenu()
    {
      menu{
        menuheader{ navigate(wiki()){"Wiki"} }
        wikiOperationsMenuItems()
        menuitem{ navigate(wikiIndex()){"Page Index"} }
        menuitem{ navigate(newPage()){"New Page"} }
        menuspacer{}
        for(p : Page in config.startpagesList) {
          menuitem{ output(p) }
        }
      }
    }

#### Bidirectional Relations

    entity Page {
      name     :: String    (id,name)
      title    :: String
      content  :: WikiText
      authors  -> Set<User> 
    }

    extend User {
      username :: String (id,name)
      fullname :: String
      email    :: Email (unique)
      homepage :: URL
      password :: Secret
      authored -> Set<Page> (inverse=Page.authors)
    }

#### Captcha and Email

    define page register() {
      form { 
        table{ editRowsUserRegistration(newUser) }
        captcha()
        action("Register", createUser())
        action createUser() {
          // check that user does not yet exist
          newUser.password := newUser.password.digest();
          newUser.persist();
          email(sendConfirmEmail(newUser));
	  return registrationPending(newUser.username);
        }
      }
    }

    define email sendConfirmEmail(reg : UserRegistration)
    {
     to(reg.email)
     from("admin@webdsl.org")
     subject("Email confirmation")
     body {
       par{ "Dear " output(reg.fullname) ", " }
       par{
          "Please confirm the receipt of this message by visiting the following page "
          navigate(confirmEmail(reg)){url(confirmEmail(reg))}
        }
      }
    }

#### File upload

    entity User {
      ...
      photo : Image
    }
    
    page editUser(u : User) {
      ...
      form{
        input(u.photo)
      }
    }

------------------------------------------------

# Release and Deployment of WebDSL

by Sander van der Burg


Release
=======
* As a source tarball

* As nix packages available from the buildfarm

* Nix:
  * Nix is a package manager for UNIX based systems (like RPM, dpkg etc.)
  * Nix is a purely functional package manager (unlike RPM, dpkg etc.)
  * Has its own Nix expression language to describe how software components are built
  * More information available at: http://nix.cs.uu.nl
  
* See: [download-url]

Basic deployment
================
* Basic deployment can be done by using the webdsl script

* The webdsl script can be used to generate a Java webapplication
  from WebDSL code

* The webdsl script can be used to create a MySQL database and
  to deploy the application on a JBoss server
  
[Link naar demo]

Nix deployment
==============
* Deployment of WebDSL applications can also be done by using the Nix package manager

* Allows us to automatically install WebDSL applications and its dependencies:
  * JBoss
  * MySQL
  * MySQL JDBC driver
  * WebDSL
  * ATerm/SDF-bundle/StrategoXT
  * Apache Ant

* WebDSL applications will be generated, compiled and activated automatically

* Multiple versions of WebDSL applications can be installed side-by-side
  (only one instance of each version can be runned though)
  
Illustration
============
[zie plaatje]

www.st.ewi.tudelft.nl/~hemel/deployment.png

Example Nix expression
======================

    {fetchurl, stdenv, pkgconfig, webdsls, jboss, jbossmysqljdbc, mysql, ant}:
    stdenv.mkDerivation {
      name = "webdslorg-0.1";
      filename = "/tmp/webdslorg-0.1.tar.gz";
      builder = ./builder.sh;
      
      appname = "webdslorg";
      mysqlHost = "localhost";
      mysqlUsername = "visser";
      mysqlPassword = "dsl";
      mysqlDatabase = "serg";
      hibernateDatabaseMode = "create-drop";
      sendEmail = "n";
      
      buildInputs = [pkgconfig webdsls jboss mysql ant];
    }


------------------------------------------------

# Future Work

* Data models
  - read-only and hidden properties
  - validation
  - data invariants specification & verification

* Data refactoring
  - more standard CRUD operations 
  - delete (recursively)
  - clone
  - renaming keys (symbolic identities)

* Interaction patterns
  - higher-level support for typical patterns
  - workflow
  - pagination
  - notification
  
* Styling
  - higher-level abstractions for layout

* Control flow: transactions and exceptions
  - more control over transactions
  - catching exceptions
  - better understand EJB3/Seam architecture

* Other mime/types
  - RSS: generating feeds 
  - PDF: files, generating documents
  - JPG
  - ...

* Performance
  - tuning hardware and software configurations
  - optimizing transformations

* Data evolution (in practice)

* A full fledged IDE for DSLsx

* Automatic deployment & activation of applications

* Refactoring the generator
  - organically grown
  - needs more systematic setup
  - reusable in implementation of new languages
  - extensibility